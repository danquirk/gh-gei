using System.Collections.Generic;using OctoshiftCLI.Models;using System.Threading.Tasks;namespace OctoshiftCLI.Services;public class AdoBranchPolicyService{private readonly AdoApi _adoApi;public AdoBranchPolicyService(AdoApi adoApi){_adoApi=adoApi;}private static readonly Dictionary<string,AdoPolicyType> _typeMap=new(){{"fa4e907d-c16b-4a4c-9dfa-4906e5d171dd",AdoPolicyType.MinimumReviewers},{"0609b952-1397-4640-95ec-e00a01b2c241",AdoPolicyType.BuildValidation},{"cbdc66da-5481-4e99-8fa4-03d3bd8d38eb",AdoPolicyType.WorkItemLinking},{"5fd24f60-6649-4587-8cdd-619a1b9f221a",AdoPolicyType.CommentResolution}};public virtual async Task<IReadOnlyList<AdoPolicyConfiguration>> GetDefaultBranchPolicies(string adoOrg,string teamProject,string repo){var repoId=await _adoApi.GetRepoId(adoOrg,teamProject,repo);var refName=$"refs/heads/main"; // TODO: dynamic default branch fetch
var json=await _adoApi.GetBranchPolicyConfigurations(adoOrg,teamProject,repoId,refName);var list=new List<AdoPolicyConfiguration>();foreach(var item in json){var typeId=(string)item["type"]["id"];var enabled=(bool?)item["isEnabled"]??true;if(!_typeMap.ContainsKey(typeId)) continue;var cfg=new AdoPolicyConfiguration{Type=_typeMap[typeId],Enabled=enabled};var settings=item["settings"] as JObject;switch(cfg.Type){case AdoPolicyType.MinimumReviewers:cfg.MinimumApproverCount=(int?)settings?["minimumApproverCount"];break;case AdoPolicyType.BuildValidation:cfg.BuildDefinitionName=(string)settings?["buildDefinitionId"];cfg.StatusCheckContext=(string)settings?["displayName"]??cfg.BuildDefinitionName;break;case AdoPolicyType.WorkItemLinking:cfg.RegexTemplates=new[]{"(?i)(fixes|closes) #[0-9]+"};break;case AdoPolicyType.CommentResolution:cfg.RegexTemplates=new[]{"COMMENT-RESOLUTION"};break;}list.Add(cfg);}return list;}}