using System.Collections.Generic;
using System.Threading.Tasks;
using OctoshiftCLI.Models;
using Newtonsoft.Json.Linq;
namespace OctoshiftCLI.Services; public class AdoBranchPolicyService { private readonly AdoApi _adoApi; public AdoBranchPolicyService(AdoApi adoApi) { _adoApi = adoApi; } private static readonly Dictionary<string, AdoPolicyType> _typeMap = new() { { "fa4e907d-c16b-4a4c-9dfa-4906e5d171dd", AdoPolicyType.MinimumReviewers }, { "0609b952-1397-4640-95ec-e00a01b2c241", AdoPolicyType.BuildValidation }, { "cbdc66da-5481-4e99-8fa4-03d3bd8d38eb", AdoPolicyType.WorkItemLinking }, { "5fd24f60-6649-4587-8cdd-619a1b9f221a", AdoPolicyType.CommentResolution } }; public virtual async Task<IReadOnlyList<AdoPolicyConfiguration>> GetDefaultBranchPolicies(string adoOrg, string teamProject, string repo) { var repoId = await _adoApi.GetRepoId(adoOrg, teamProject, repo); var defaultBranch = await _adoApi.GetRepoDefaultBranch(adoOrg, teamProject, repo); var refName = defaultBranch.StartsWith("refs/heads/") ? defaultBranch : $"refs/heads/{defaultBranch}"; var json = await _adoApi.GetBranchPolicyConfigurations(adoOrg, teamProject, repoId, refName); var list = new List<AdoPolicyConfiguration>(); foreach (JObject item in json) { var typeId = (string)item["type"]?["id"]; var enabled = (bool?)item["isEnabled"] ?? true; if (!_typeMap.TryGetValue(typeId, out var mapped)) { continue; } var settings = item["settings"] as JObject; var cfg = mapped switch { AdoPolicyType.MinimumReviewers => new AdoPolicyConfiguration { Type = mapped, Enabled = enabled, MinimumApproverCount = (int?)settings?["minimumApproverCount"] }, AdoPolicyType.BuildValidation => new AdoPolicyConfiguration { Type = mapped, Enabled = enabled, BuildDefinitionName = (string)settings?["buildDefinitionId"], StatusCheckContext = (string)settings?["displayName"] ?? (string)settings?["buildDefinitionId"] }, AdoPolicyType.WorkItemLinking => new AdoPolicyConfiguration { Type = mapped, Enabled = enabled, RegexTemplates = new[] { "(?i)(fixes|closes) #[0-9]+" } }, AdoPolicyType.CommentResolution => new AdoPolicyConfiguration { Type = mapped, Enabled = enabled, RegexTemplates = new[] { "COMMENT-RESOLUTION" } }, _ => null }; if (cfg != null) { list.Add(cfg); } } return list; } }
