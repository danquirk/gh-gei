using System.Collections.Generic;using System.Linq;using System.Threading.Tasks;using FluentAssertions;using Moq;using OctoshiftCLI.Models;using OctoshiftCLI.Services;using Xunit;namespace OctoshiftCLI.Tests;public class DefaultBranchRulesetServiceDiffTests{[Fact]public async Task Apply_Logs_Diff_On_Update(){var api=new Mock<GithubApi>(null,null,null,null);api.Setup(a=>a.GetRepoRulesets("org","repo")).ReturnsAsync(new List<(int,string,IEnumerable<string>,int?,IEnumerable<string>)>{(10,"rs",new[]{"main"}.AsEnumerable(),1,new[]{"build"}.AsEnumerable())});api.Setup(a=>a.UpdateRepoRuleset("org","repo",10,It.IsAny<GithubRulesetDefinition>())).Returns(Task.CompletedTask);var log=new Mock<OctoLogger>();var def=new GithubRulesetDefinition{Name="rs",TargetPatterns=new[]{"main"},RequiredApprovingReviewCount=2,RequiredStatusChecks=new[]{"build","test"}};var svc=new DefaultBranchRulesetService(api.Object,log.Object);await svc.Apply("org","repo",def,false);log.Verify(l=>l.LogInformation(It.Is<string>(s=>s.Contains("Approving review count"))),Times.Once);log.Verify(l=>l.LogInformation(It.Is<string>(s=>s.Contains("Added status checks"))),Times.Once);}}